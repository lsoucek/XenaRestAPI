FORMAT: 1A
HOST: https://xena.expan.do:3444

# Xena REST Api

Xena API enables get and manipulate key data items defined in the Expando Xena system.

All REST API calls are authenticated on server side via HTTP basic authentication.

## Product Management

Product related data provides detail item description such a way it allows seller register it on different marketplaces. Some product properties are common (aka reusable over marketplaces) while part is language/marketplace specific (e.g. product title, ASIN code, etc.).

Beside product description this API part provides also inventory and price data. This allows external client apps keep marketplace offers up to date.

### Company level actions [/v1/Products/{CompanyID}{?limit,page,FromTimeStamp}]
Call this resource enables client to get product data in lists like form. If no URI conditional parameters are used than function returns full list of products maintained in Xena system for given company in paged form.

All call results are generally paged to ensure data will not exceed HTTP message capacity. Default values is set to 100 product items in one page. The ***limit*** value can be set in range from 1 to 100. Any bigger value than limit max. are set to 100, any value lower than 1 are set to 1.

All product data items have TimeStamp value of long data type attached to it. This value is changed every time product item is changed somehow. It is guarantied value is monotonically increased as it is based on DateTime.Now.Ticks from C#. 

If client app is state-full and it is interested with product data changes than it is more data effective if on call is used  **FromThisStamp** parameter. Client app must just find the max. value from its product repository and and put this value on param call. 

Result data contains amon other two parameters ***currentPageNum*** and ***hasNextPage***. The ***currentPageNum*** contains current page number which was requested (it shall match value from GET quest) while ***hasNextPage*** indicate if there is another waiting data page.

It shall be stated the page ***limit*** size shall not be changed after calling page 1 and client app start to "traverses" additional result pages.

+ Parameters
    + CompanyID: 123 (number, required) - company ID
    + limit: 100 (number, optional) - page size. Min 1 and Max value 100.
    + page: 1 (number, optional) - page number to start from. Value starts from 1.
    + FromTimeStamp: `636516244170000000` (string, optional) - time stamp from which shall be collected data

#### Get product list for company ID [GET]
Get list of products.

+ Response 200 (application/json)
    + Attributes (ReturnedRestApiData)
        + data
            + products (array[ProductDef], optional)
            

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="Xena folder"

+ Request
    + Headers

            Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l
            
+ Response 404 (application/json)
    + Attributes (ReturnedRestApiData)
        + result: error
        + errorDetails: `Company not found`
        + data: null

#### Insert new product for company ID [POST]
Insert new product item. If item with given SKU exists than is returned error.

+ Request (application/json)
    + Attributes (ModificationRequestDef)
        + data
            + products (ProductBaseDef, optional)

+ Response 200 (application/json)
    + Attributes (ReturnedRestApiData)
        + data: null

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="Xena folder"

+ Request
    + Headers

            Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l

+ Response 404 (application/json)
    + Attributes (ReturnedRestApiData)
        + result: error
        + errorDetails: `Company not found or product already exists`
        + data: null

### SKU product actions [/v1/Products/{CompanyID}/{SKU}]
Get specific product by SKU

+ Parameters
    + CompanyID: 123 (number, required) - company ID
    + SKU: 2014800111 (string, required) - SKU ID

#### Get product details for SKU [GET]
Gets specific product details.

+ Response 200 (application/json)
    + Attributes (ReturnedRestApiData)

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="Xena folder"

+ Request
    + Headers

            Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l

+ Response 404 (application/json)
    + Attributes (ReturnedRestApiData)
        + result: error
        + errorDetails: `Company or product not found.`
        + data: null

#### Insert or update product details for SKU [PUT]
Update existing product item based on SKU.

+ Response 200 (application/json)
    + Attributes (ReturnedRestApiData)
        + data: null

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="Xena folder"

+ Request
    + Headers

            Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l

+ Response 404 (application/json)
    + Attributes (ReturnedRestApiData)
        + result: error
        + errorDetails: `Company or product not found.`
        + data: null

### Inventory and Price Management per Company [/v1/IPM/{CompanyID}{?limit,page,FromTimeStamp}]
Resource enables load and save inventory and price related data for specified company.

+ Parameters
    + CompanyID: 123 (number, required) - company ID
    + limit: 100 (number, optional) - page reference. Min value 1 and Max value 100. Default 100.
    + page: 1 (number, optional) - page number to start from. Default is 1.
    + FromTimeStamp: `636516244170000000` (string, optional) - time stamp from which shall be collected data

#### Get inventory and price data [GET]
Get IP list.

+ Response 200 (application/json)
    + Attributes (ReturnedRestApiData)
        + data
            + inventoryDef (array[InventoryAndPriceDef], optional)

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="Xena folder"

+ Request
    + Headers

            Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l

+ Response 404 (application/json)
    + Attributes (ReturnedRestApiData)
        + result: error
        + errorDetails: `Company not found.`
        + data: null

#### Insert or update product prices [POST]
Insert new Inventory and Price data. Data in post body must contain fully defined IP data structure (aka all prices and qty) for marketplace and SKU combination.

+ Request (application/json)
    + Attributes (ReturnedRestApiData)
        + companyID: 16 (number, required) - Company ID
        + data
            + inventoryDef (InventoryAndPriceDef, required)

+ Response 200 (application/json)
    + Attributes (ReturnedRestApiData)
        + data: null

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="Xena folder"
+ Request
    + Headers

            Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l

+ Response 404 (application/json)
    + Attributes (ReturnedRestApiData)
        + result: error
        + errorDetails: `Company not found or SKU data already exists.`
        + data: null

### Inventory and Price Management per Company and SKU [/v1/IPM/{CompanyID}/{SKU}{?limit,page,FromTimeStamp}]
Per SKU inventory and price data loading and updates.

+ Parameters
    + CompanyID: 123 (number, required) - company ID
    + SKU: A66 (string, required) - Product sku
    + limit: 100 (number, optional) - page reference. Min value 1, Max value 100. Default 100.
    + page: 1 (number, optional) - page number to start from. Default is 1.
    + FromTimeStamp: `636516244170000000` (string, optional) - time stamp from which shall be collected data

#### Get inventory and price data [GET]
Get IP for specific SKU.

+ Response 200 (application/json)
    + Attributes (ReturnedRestApiData)
        + data
            + inventoryDef (InventoryAndPriceDef, optional)

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="Xena folder"

+ Request
    + Headers

            Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l

+ Response 404 (application/json)
    + Attributes (ReturnedRestApiData)
        + result: error
        + errorDetails: `Company or SKU not found.`
        + data: null

#### Insert or update product prices [PUT]
Enables update existing IP data for specific SKU. Update body expects full update for quantity and all price of given SKU and marketplace combination.

+ Request (application/json)
    + Attributes (ReturnedRestApiData)
        + companyID: 16 (number, required) - Company ID
        + data
            + inventoryDef (InventoryAndPriceDef, required)

+ Response 200 (application/json)
    + Attributes (ReturnedRestApiData)
        + data: null

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="Xena folder"

+ Request
    + Headers

            Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l

+ Response 404 (application/json)
    + Attributes (ReturnedRestApiData)
        + result: error
        + errorDetails: `Company not found or SKU not found.`
        + data: null

# Data Structures

## DataDefBase (object)

- sku: 2014800111 (string, required) - SKU reference

## OrderDef (object)

- Include DataDefBase

## SellerOrderDef (object)
Defines data object carryout true marketplace

- Include DataDefBase

## CommonDataDef (object)

- parentChild (enum[string], required)
    - Base
    - Parent
    - Variant
- updateBlocked: false (boolean, required) - indicate whether is product modifiable
- productStatus (enum[string], required)
    - Unknown
    - New
    - Active
    - InActive
    - Archived
- ean: 4024144201488 (string, nullable) - EAN number
- parentSKU (string, nullable) - reference to parent SKU. Mandatory for variants otherwise null.
- brand: Cottelli (string, nullable) - Brand like ThinkPad, Xperia, etc.
- manufacturer: Cottelli (string, optional) - Manufacturer like Lenovo, Sony, etc.
- mnp (string, optional) - Manufacturer part number
- productCategory: `Dámské erotické šaty` (string, nullable) - Defines high level category. Might be also list. Depends on destination interpretation.
- productSubCategory (string, optional) - Defines sub-category for product like chef kniwes
- size (string, nullable) - define size like 180, L, 43.5.
- sizeMap (string, nullable) - define standardized size value. Based on entry size
- color (string, nullable) - defines color like "light blue", etc. 
- colorMap (string, nullable) - defines color from range of 16 colors pallete (aka blue)
- variationTheme (string) - indicate variation theme. Currently supported "Size", "Color", "SizeAndColor"
- itemCondition (enum[string], required) 
    - Undefined
    - New
    - Used
- initPrice: 0 (number, default) - product price when product definition imported
- ccy: `CZK` (string, required) - 3 letter currency as defined in the ISO 4217
- initQuantity: 1 (number, default) - indicate stock volume during product definition import/update.
- taxCode (string, optional) - identify tax code like VAT21, etc.
- productUrl: `https://www.sex-shop.cz/access18/cottelli-rybarka-sitovane-saty-s-l-d3073.htm?hrk=QPOCJKFGLDS` (string, nullable) - Reference to seller product page
- imgUrls (array[string])
- customData: `{"VAT":"21"}` (string, nullable) - keeps custom data in key/value format. Typically usefull for data which do not have standard field in DB but are important for given product like varies contact lenses sizes, water content, etc.
- origData: `{"CODE":"2014800000","PRICE":"312.4","VAT":"21","DELIVERY_DATE":"0"}` (string, nullable) - keeps custom data in key/value format

## LocalizedDataDef (object)

- language(enum[string], required) - indicate language which is used for localized data
    - NA
    - CS
    - EN
    - DE
    - ES
    - FR
    - IT
    - PL
    - RO
    - UK
    - HU
    
- suppliedBySeller: true (boolean, required) - inidicate if seller was supplier this localized data
- translated: false (boolean) - indicate if data was translated on Xena side
- approved: true (boolean) - indicate if language wersion is fully approved to be used on marketplace side
- name: `Cottelli Rybárka Sítované šaty S-L` (string, required) - product title
- description: `Skvele elastické šaty s velkými oky. Materiál: 85% Polyamid, 15% Elasthan.` (string, required) - product description
- keywords (array[string], required) - list of keyword definitions to be registered with search engine. Up to 5 items in array. Each item can contain multiple keywords separated by comma.
- bulletPoints (array[string], required) - list of bullet points to be shown as short description on product page. Up to 5 items in array.

## MarketplaceSetupDef (object)

- Amazon: 0 (number, optional) - Indicate if on AMAZON 1 yes, 0 no
- Ebay: 0 (number, optional) - Indicate if on AMAZON 1 yes, 0 no
- Spartoo: 0 (number, optional) - Indicate if on Spartoo 1 yes, 0 no
- Inspirum: 0 (number, optional) - Indicate if on Inspirum 1 yes, 0 no
- Magento: 0 (number, optional) - Indicate if on Magento 1 yes, 0 no

## MarketRegistryDataDef (object)

- marketplaceSetup (MarketplaceSetupDef, optional) - list of marketplaces with values indicating if marketplace used for trading or not.

## ProductBaseDef (object)

- Include DataDefBase
- commonData (CommonDataDef, required) - common product data section
- localizedData (array[LocalizedDataDef], optional) - product language specific fields. For each language translation one record.
- marketRegistryData (MarketRegistryDataDef, optional) - holds info about product presented on marketplace  

## ProductDef (object)

- Include ProductBaseDef
- lastChanged: `2018-01-15T14:46:57` (string, required) - Time stamp when record was last time modified/created.
- key: 2014800000 (string, required) - unified key under which product def is uniquelly sorted.
- timeStamp: 636516244170000000 (string, required) - Time stannp traslated into DateTime.Ticks as defined in C#.

## InventoryAndPriceDef (object)

- Include DataDefBase
- marketplace (enum[string], required) - marketplace reference. 
  - NA - Not available
  - Amazon
  - Spartoo
  - Ebay
  - Inspirum
  - Magento
- quantity: 0 (number, default) - product QTY
- priceUS (number, optional) - price for US country. Implied currency USD. 
- priceUK (number, optional) - price for UK country. Implied currency GBP.
- priceDE: 0.01 (number) - price for DE country. Implied currency EUR.
- priceFR (number, optional) - price for FR country. Implied currency EUR.
- priceES (number, optional) - price for ES country. Implied currency EUR.
- priceIT (number, optional) - price for IT country. Implied currency EUR.
- priceHU (number, optional) - price for HU country. Implied currency HUF.
- priceRO (number, optional) - price for RO country. Implied currency RON.
- pricePL (number, optional) - price for PL country. Implied currency PLZ.
- priceUE (number, optional) - price for Ukraine country. Implied currency UAH.
- lastChanged: `2018-01-15T14:46:57` (string, required) - Time stamp when record was last time modified/created.
- key: 2014800000 (string, required) - unified key under which product def is uniquelly sorted.
- timeStamp: 636516244170000000 (string, required) - Time stamp translated into DateTime.Ticks as defined in C#.

## DataDef (object)

- orders (array[OrderDef], optional) - list of orders for given filter and company ID
- sellerOrders (array[SellerOrderDef], optional) - list of orders for given filter and company ID
- products (array[ProductDef], optional) - list of products for given filter and companyID
- inventoryDef (array[InventoryAndPriceDef], optional) - list of SKU with current inventory and prices values.


## ReturnedRestApiData (object)

- result (enum[string], required) - indicate success or failuers of data collection on server side
    - ok
    - error
- currentPageNum: 1 (number, default) - returns current page number
- hasNextPage: false (boolean, default) - indicate if next page is available
- errorDetails (string, nullable) - Holds error if result type is error
- companyID: 16 (number, required) - Company ID
- data (DataDef, nullable) - specific API data based on original request and URI for its call


## ModificationRequestDef (object)
- companyID: 16 (number, required) - Company ID
- data (DataDef, nullable) - specific API data based on original request and URI for its call